// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Linq;
using Microsoft.ML;
using ImageBinaryClassificationML.Model;
using System.Diagnostics;

namespace ImageBinaryClassificationML.ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // arg[0] - path to the TSV file containing dataset
            // arg[1] - path where to store the model (ZIP)

            if (args.Length < 2)
                throw new Exception($"ERROR: Too few command-line arguments ({args.Length})!"); ;

            var datasetTsvFilePath = args[0];
            var saveModelZipFilePath = args[1];

            Console.WriteLine($"DATASET: {datasetTsvFilePath}");

            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();

            try
            {
                ModelBuilder.CreateModel(
                    datasetTsvFilePath,
                    saveModelZipFilePath);
            }
            finally
            {
                stopwatch.Stop();
            }

            Console.WriteLine($"ELAPSED TIME: {stopwatch.Elapsed}");
            Console.WriteLine($"MODEL SAVED TO: {saveModelZipFilePath}");

            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();
        }

        static void TestModelOnSingleDataSample(
            string datasetTsvFilePath,
            string modelPath)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = CreateSingleDataSample(datasetTsvFilePath);

            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(
                modelPath,
                sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Label with predicted Label from sample data...\n\n");
            Console.WriteLine($"ImageSource: {sampleData.ImageSource}");
            Console.WriteLine($"\n\nActual Label: {sampleData.Label} \nPredicted Label value {predictionResult.Prediction} \nPredicted Label scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                path: dataFilePath,
                hasHeader: true,
                separatorChar: '\t',
                allowQuoting: true,
                allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                .First();

            return sampleForPrediction;
        }
        #endregion
    }
}
